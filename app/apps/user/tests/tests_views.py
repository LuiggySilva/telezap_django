from django.test import TestCase
from django.urls import reverse
from django.contrib.messages import get_messages
from .factories import UserFactory


class LoginViewTests(TestCase):
    def setUp(self):
        self.login_url = reverse('login')
        self.username = 'testuser'
        self.password = 'testpassword'
        self.user = UserFactory(username=self.username, password=self.password)


    def test_login_success(self):
        '''
        Descri√ß√£o:
            Este teste verifica o comportamento da view login quando um usu√°rio tenta se logar com dados v√°lidos.
            Ele verifica se o usu√°rio √© logado corretamente e se ele √© redirecionado para a p√°gina home ap√≥s o login.

        Pr√©-condi√ß√µes:
            - Um usu√°rio existente com email e senha logado no sistema.

        P√≥s-condi√ß√µes:
            - O usu√°rio deve ser logado corretamente.
            - O usu√°rio deve ser redirecionado para a p√°gina home ap√≥s o login.
        '''

        response = self.client.post(
            self.login_url, 
            {
                'username': self.username, 
                'password': self.password
            },
        )
        self.assertEqual(response.status_code, 200)


    def test_login_failure(self):
        '''
        Descri√ß√£o:
            Este teste verifica o comportamento da view login quando um usu√°rio tenta se logar com dados inv√°lidos.
            Ele verifica se o usu√°rio n√£o √© logado e se uma mensagem de erro √© exibida ap√≥s a tentativa de login.

        Pr√©-condi√ß√µes:
            - Um usu√°rio existente com email e senha logado no sistema.

        P√≥s-condi√ß√µes:
            - O usu√°rio n√£o deve ser logado.
            - Uma mensagem de erro deve ser exibida ap√≥s a tentativa de login.
        '''
        
        response = self.client.post(
            self.login_url, 
            {
                'username': self.username, 
                'password': 'wrongpassword'
            }
        )
        self.assertEqual(response.status_code, 200)


class LogoutViewTests(TestCase):
    def setUp(self):
        self.logout_url = reverse('logout')
        self.redirect_url = reverse('user:landing_page')

    def test_logout_success(self):
        '''
        Descri√ß√£o:
            Este teste verifica o comportamento da view logout quando um usu√°rio logado tenta se deslogar do sistema.
            Ele verifica se o usu√°rio √© deslogado corretamente e se ele √© redirecionado para a p√°gina home ap√≥s
            o logout.
        
        Pr√©-condi√ß√µes:
            - Um usu√°rio existente com email e senha logado no sistema.

        P√≥s-condi√ß√µes:
            - O usu√°rio deve ser deslogado corretamente.
            - O usu√°rio deve ser redirecionado para a p√°gina home ap√≥s o logout.
        '''

        response = self.client.get(self.logout_url)
        self.assertEqual(response.status_code, 302)
        self.assertRedirects(response, self.redirect_url)
        

class SignupViewTests(TestCase):
    def setUp(self):
        self.signup_url = reverse('signup')
        self.username = 'testuser'
        self.email = 'testuser@email.com'
        self.password = 'testpassword'

    def test_signup_success(self):
        '''
        Descri√ß√£o:
            Este teste verifica o comportamento da view signup quando um usu√°rio tenta se cadastrar com dados
            v√°lidos. Ele verifica se o usu√°rio √© cadastrado corretamente e se ele √© redirecionado para a p√°gina
            de login ap√≥s o cadastro.

        Pr√©-condi√ß√µes:
            - Um usu√°rio que n√£o est√° logado no sistema.
            - O usu√°rio tenta se cadastrar com dados v√°lidos.

        P√≥s-condi√ß√µes:
            - O usu√°rio deve ser cadastrado corretamente.
            - O usu√°rio deve ser redirecionado para a p√°gina de login ap√≥s o cadastro.
        '''

        response = self.client.post(
            self.signup_url, 
            {
                'username': self.username, 
                'email': self.email,
                'password1': self.password,
                'password2': self.password
            }
        )
        self.assertEqual(response.status_code, 302)
        self.assertRedirects(response, reverse('login'))


    def test_signup_failure_email(self):
        '''
        Descri√ß√£o:
            Este teste verifica o comportamento da view signup quando um usu√°rio tenta se cadastrar com um email
            inv√°lido. Ele verifica se o usu√°rio n√£o √© cadastrado e se uma mensagem de erro √© exibida ap√≥s a tentativa
            de cadastro.

        Pr√©-condi√ß√µes:
            - Um usu√°rio que n√£o est√° logado no sistema.
            - O usu√°rio tenta se cadastrar com um email inv√°lido.

        P√≥s-condi√ß√µes:
            - O usu√°rio n√£o deve ser cadastrado.
            - Uma mensagem de erro deve ser exibida ap√≥s a tentativa de cadastro.
        '''

        response = self.client.post(
            self.signup_url, 
            {
                'username': self.username, 
                'email': 'invalid@email',
                'password1': self.password,
                'password2': self.password
            }
        )
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Informe um endere√ßo de email v√°lido.')


    def test_signup_failure_username(self):
        '''
        Descri√ß√£o:
            Este teste verifica o comportamento da view signup quando um usu√°rio tenta se cadastrar com um nick
            inv√°lido. Ele verifica se o usu√°rio n√£o √© cadastrado e se uma mensagem de erro √© exibida ap√≥s a tentativa
            de cadastro.

        Pr√©-condi√ß√µes:
            - Um usu√°rio que n√£o est√° logado no sistema.
            - O usu√°rio tenta se cadastrar com um nick inv√°lido.

        P√≥s-condi√ß√µes:
            - O usu√°rio n√£o deve ser cadastrado.
            - Uma mensagem de erro deve ser exibida ap√≥s a tentativa de cadastro.
        '''
        
        response = self.client.post(
            self.signup_url, 
            {
                'username': 'invalid@123ü§°', 
                'email': self.email,
                'password1': self.password,
                'password2': self.password
            }
        )
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'O seu nick n√£o pode conter caracteres especiais ou emojis.')


    def test_signup_failure_weak_password(self):
        '''
        Descri√ß√£o:
            Este teste verifica o comportamento da view signup quando um usu√°rio tenta se cadastrar com uma senha
            fraca. Ele verifica se o usu√°rio n√£o √© cadastrado e se uma mensagem de erro √© exibida ap√≥s a tentativa
            de cadastro.

        Pr√©-condi√ß√µes:
            - Um usu√°rio que n√£o est√° logado no sistema.
            - O usu√°rio tenta se cadastrar com uma senha fraca.

        P√≥s-condi√ß√µes:
            - O usu√°rio n√£o deve ser cadastrado.
            - Uma mensagem de erro deve ser exibida ap√≥s a tentativa de cadastro.
        '''

        response = self.client.post(
            self.signup_url, 
            {
                'username': self.username, 
                'email': self.email,
                'password1': '123',
                'password2': '123'
            }
        )
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Esta senha √© muito comum.')
        self.assertContains(response, 'Esta senha √© muito curta. Ela precisa conter pelo menos 8 caracteres.')
        self.assertContains(response, 'Esta senha √© inteiramente num√©rica.')


    def test_signup_failure_passwords_dont_match(self):
        '''
        Descri√ß√£o:
            Este teste verifica o comportamento da view signup quando um usu√°rio tenta se cadastrar com uma senha
            que n√£o corresponde √† confirma√ß√£o da senha. Ele verifica se o usu√°rio n√£o √© cadastrado e se uma mensagem
            de erro √© exibida ap√≥s a tentativa de cadastro.

        Pr√©-condi√ß√µes:
            - Um usu√°rio que n√£o est√° logado no sistema.
            - O usu√°rio tenta se cadastrar com uma senha que n√£o corresponde √† confirma√ß√£o da senha.
        
        P√≥s-condi√ß√µes:
            - O usu√°rio n√£o deve ser cadastrado.
            - Uma mensagem de erro deve ser exibida ap√≥s a tentativa de cadastro.
        '''

        response = self.client.post(
            self.signup_url, 
            {
                'username': self.username, 
                'email': self.email,
                'password1': self.password,
                'password2': 'wrongpassword'
            }
        )
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Os dois campos de senha n√£o correspondem.')


class ProfileViewTests(TestCase):
    def setUp(self):
        self.username = 'testuser'
        self.password = 'testpassword'
        self.user = UserFactory(username=self.username, password=self.password)
        self.email = self.user.email
        self.profile_url = reverse('user:profile', kwargs={'slug': self.username})
        self.profile_update_url = reverse('user:profile_update', kwargs={'slug': self.username})
        self.profile_password_update_url = reverse('user:profile_password_update', kwargs={'slug': self.username})
        self.profile_config_update_url = reverse('user:profile_config_update', kwargs={'slug': self.username})


    def test_profile_view_success(self):
        '''
        Descri√ß√£o:
            Este teste verifica o comportamento da view profile quando um usu√°rio logado tenta acessar a sua p√°gina
            de perfil de usu√°rio. Ele verifica se o perfil √© exibido corretamente.

        Pr√©-condi√ß√µes:
            - Um usu√°rio existente com email e senha logado no sistema.

        P√≥s-condi√ß√µes:
            - O perfil do usu√°rio deve ser exibido corretamente.
        '''

        self.client.login(username=self.email, password=self.password)
        response = self.client.get(self.profile_url)

        self.assertEqual(response.status_code, 200)
        self.assertContains(response, self.username)
        self.assertContains(response, self.email)


    def test_user_profile_view_requires_login(self):
        '''
        Descri√ß√£o:
            Este teste verifica o comportamento da view profile quando um usu√°rio n√£o logado tenta acessar
            a p√°gina de perfil de outro usu√°rio. Ele verifica se o usu√°rio √© redirecionado para a p√°gina de
            login.

        Pr√©-condi√ß√µes:
            - Um usu√°rio que n√£o est√° logado no sistema.
        
        P√≥s-condi√ß√µes:
            - O usu√°rio deve ser redirecionado para a p√°gina de login.
        '''

        response = self.client.get(self.profile_url)
        self.assertEqual(response.status_code, 302)

        self.client.login(username=self.email, password=self.password)
        response = self.client.get(self.profile_url)
        self.assertEqual(response.status_code, 200)


    def test_profile_update_view_success(self):
        '''
        Descri√ß√£o:
            Este teste verifica o comportamento da view profile_update quando o perfil do usu√°rio √© atualizado.
            Ele verifica se o perfil √© atualizado corretamente e se o usu√°rio √© redirecionado para a p√°gina do
            perfil atualizado.

        Pr√©-condi√ß√µes:
            - Um usu√°rio existente com email e senha logado no sistema.

        P√≥s-condi√ß√µes:
            - O perfil do usu√°rio deve ser atualizado com sucesso.
            - O usu√°rio deve ser redirecionado para a p√°gina do perfil atualizado.
            - Uma mensagem de sucesso deve ser exibida ap√≥s a atualiza√ß√£o.
        '''

        self.client.login(username=self.email, password=self.password)
        new_user_name = 'newname'
        new_user_status = 'newstatus'
        new_user_profile_url = reverse('user:profile', kwargs={'slug':  new_user_name})

        response = self.client.post(
            self.profile_update_url, 
            {
                'photo': 'user_profiles_photos/default.jpg', 
                'username': new_user_name,
                'status': new_user_status,
                'email': self.email
            },
            follow=True  # Segue o redirecionamento
        )

        self.assertContains(response, new_user_name)
        self.assertContains(response, new_user_status)

        messages = [msg.message for msg in get_messages(response.wsgi_request)]
        self.assertIn('Perfil atualizado com sucesso!', messages)


    def test_profile_update_view_failure(self):
        '''
        Descri√ß√£o:
            Este teste verifica o comportamento da view profile_update quando o perfil do usu√°rio √© atualizado
            com dados inv√°lidos. Ele verifica se o perfil n√£o √© atualizado e se uma mensagem de erro √© exibida
            ap√≥s a tentativa de atualiza√ß√£o.

        Pr√©-condi√ß√µes:
            - Um usu√°rio existente com email e senha logado no sistema.

        P√≥s-condi√ß√µes:
            - O perfil do usu√°rio n√£o deve ser atualizado.
            - Uma mensagem de erro deve ser exibida ap√≥s a tentativa de atualiza√ß√£o.
        '''

        self.client.login(username=self.email, password=self.password)
        new_user_name = 'InvalidName@123ü§°'
        new_user_status = 'tooloongstatus' * 100
        new_user_email = 'wrong@mail'

        response = self.client.post(
            self.profile_update_url, 
            {
                'photo': 'user_profiles_photos/default.jpg', 
                'username': new_user_name,
                'status': new_user_status,
                'email': new_user_email
            },
            follow=True  # Segue o redirecionamento
        )
        self.assertNotContains(response, new_user_name)
        self.assertNotContains(response, new_user_status)
        self.assertNotContains(response, new_user_email)

        messages = [msg.message for msg in get_messages(response.wsgi_request)]
        self.assertIn('Erro na altera√ß√£o do perfil!', messages)
        self.assertIn('Informe um endere√ßo de email v√°lido.', messages)
        self.assertIn('O seu nick n√£o pode conter caracteres especiais ou emojis.', messages)
        self.assertIn(f'Status: Certifique-se de que o valor tenha no m√°ximo 250 caracteres (ele possui {len(new_user_status)}).', messages)


    def test_profile_password_update_view_success(self):
        """
        Descri√ß√£o:
            Este teste verifica o comportamento da view profile_password_update quando a senha do perfil do usu√°rio
            √© atualizada com uma nova senha. Ele verifica se a senha √© atualizada corretamente e se uma mensagem de
            sucesso √© exibida ap√≥s a atualiza√ß√£o.

        Pr√©-condi√ß√µes:
            - Um usu√°rio existente com email e senha logado no sistema.

        P√≥s-condi√ß√µes:
            - A senha do perfil do usu√°rio deve ser atualizada com sucesso.
            - Uma mensagem de sucesso deve ser exibida ap√≥s a atualiza√ß√£o.
        """

        self.client.login(username=self.email, password=self.password)
        new_password = 'NewSecuryPassword@123'
        response = self.client.post(
            self.profile_password_update_url, 
            {
                'old_password': self.password, 
                'new_password1': new_password,
                'new_password2': new_password,
            },
            follow=True  # Segue o redirecionamento
        )
        self.assertEqual(response.status_code, 200)
        messages = [msg.message for msg in get_messages(response.wsgi_request)]
        self.assertIn('Senha atualizada com sucesso!', messages)


    def test_profile_password_update_view_failure_wrong_old_password(self):
        """
        Descri√ß√£o:
            Este teste verifica o comportamento da view profile_password_update quando a senha do perfil do usu√°rio
            √© atualizada com uma senha antiga incorreta. Ele verifica se a senha n√£o √© atualizada e se uma mensagem
            de erro √© exibida ap√≥s a tentativa de atualiza√ß√£o.

        Pr√©-condi√ß√µes:
            - Um usu√°rio existente com email e senha logado no sistema.

        P√≥s-condi√ß√µes:
            - A senha do perfil do usu√°rio n√£o deve ser atualizada.
            - Uma mensagem de erro deve ser exibida ap√≥s a tentativa de atualiza√ß√£o.
        """

        self.client.login(username=self.email, password=self.password)
        new_password = 'NewSecuryPassword@123'
        response = self.client.post(
            self.profile_password_update_url, 
            {
                'old_password': 'wrongpassword', 
                'new_password1': new_password,
                'new_password2': new_password,
            },
            follow=True  # Segue o redirecionamento
        )
        messages = [msg.message for msg in get_messages(response.wsgi_request)]
        self.assertIn('Erro na altera√ß√£o da senha!', messages)
        self.assertIn('A senha antiga foi digitada incorretamente. Por favor, informe-a novamente.', messages)


    def test_profile_password_update_view_failure_weak_password(self):
        """
        Descri√ß√£o:
            Este teste verifica o comportamento da view profile_password_update quando a senha do perfil do usu√°rio
            √© atualizada com uma nova senha fraca. Ele verifica se a senha n√£o √© atualizada e se uma mensagem de erro
            √© exibida ap√≥s a tentativa de atualiza√ß√£o.

        Pr√©-condi√ß√µes:
            - Um usu√°rio existente com email e senha logado no sistema.

        P√≥s-condi√ß√µes:
            - A senha do perfil do usu√°rio n√£o deve ser atualizada.
            - Uma mensagem de erro deve ser exibida ap√≥s a tentativa de atualiza√ß√£o.
        """

        self.client.login(username=self.email, password=self.password)
        new_password = '123'
        response = self.client.post(
            self.profile_password_update_url, 
            {
                'old_password': self.password, 
                'new_password1': new_password,
                'new_password2': new_password,
            },
            follow=True  # Segue o redirecionamento
        )
        messages = [msg.message for msg in get_messages(response.wsgi_request)]
        self.assertIn('Erro na altera√ß√£o da senha!', messages)
        self.assertIn('Esta senha √© muito comum.', messages)
        self.assertIn('Esta senha √© muito curta. Ela precisa conter pelo menos 8 caracteres.', messages)
        self.assertIn('Esta senha √© inteiramente num√©rica.', messages)


    def test_profile_password_update_view_failure_passwords_dont_match(self):
        """
        Descri√ß√£o:
            Este teste verifica o comportamento da view profile_password_update quando a senha do perfil do usu√°rio
            √© atualizada com uma nova senha que n√£o corresponde √† confirma√ß√£o da nova senha. Ele verifica se a senha
            n√£o √© atualizada e se uma mensagem de erro √© exibida ap√≥s a tentativa de atualiza√ß√£o.

        Pr√©-condi√ß√µes:
            - Um usu√°rio existente com email e senha logado no sistema.

        P√≥s-condi√ß√µes:
            - A senha do perfil do usu√°rio n√£o deve ser atualizada.
            - Uma mensagem de erro deve ser exibida ap√≥s a tentativa de atualiza√ß√£o.
        """

        self.client.login(username=self.email, password=self.password)
        new_password = 'NewSecuryPassword@123'
        response = self.client.post(
            self.profile_password_update_url,
            {
                'old_password': self.password,
                'new_password1': new_password,
                'new_password2': 'wrongpassword',
            },
            follow=True  # Segue o redirecionamento
        )

        messages = [msg.message for msg in get_messages(response.wsgi_request)]
        self.assertIn('Erro na altera√ß√£o da senha!', messages)
        self.assertIn('Os dois campos de senha n√£o correspondem.', messages)


    def test_profile_config_update_view_success(self):
        '''
        Descri√ß√£o:
            Este teste verifica o comportamento da view profile_config_update quando as configura√ß√µes de 
            visibilidade do perfil do usu√°rio s√£o atualizadas. Ele verifica se as configura√ß√µes s√£o atualizadas 
            corretamente e se uma mensagem de sucesso √© exibida ap√≥s a atualiza√ß√£o.

        Pr√©-condi√ß√µes:
            - Um usu√°rio existente com email e senha logado no sistema.
        
        P√≥s-condi√ß√µes:
            - As configura√ß√µes de visibilidade do perfil do usu√°rio devem ser atualizadas com sucesso.
            - Uma mensagem de sucesso deve ser exibida ap√≥s a atualiza√ß√£o.
        '''

        self.client.login(username=self.email, password=self.password)
        new_photo_config = 'QU'
        new_email_config = 'AA'
        new_status_config = 'AA'
        new_online_config = 'NM'

        response = self.client.post(
            self.profile_config_update_url, 
            {
                'config_email_visibility': new_email_config,
                'config_photo_visibility': new_photo_config,
                'config_status_visibility': new_status_config,
                'config_online_visibility': new_online_config
            },
            follow=True  # Segue o redirecionamento
        )

        messages = [msg.message for msg in get_messages(response.wsgi_request)]
        self.assertIn('Configura√ß√µes atualizadas com sucesso!', messages)


    def test_profile_config_update_view_failure(self):
        '''
        Descri√ß√£o:
            Este teste verifica o comportamento da view profile_config_update quando as configura√ß√µes de
            visibilidade do perfil do usu√°rio s√£o atualizadas com uma configura√ß√£o inv√°lida. Ele verifica se
            as configura√ß√µes n√£o s√£o atualizadas e se uma mensagem de erro √© exibida ap√≥s a tentativa de atualiza√ß√£o.

        Pr√©-condi√ß√µes:
            - Um usu√°rio existente com email e senha logado no sistema.

        P√≥s-condi√ß√µes:
            - As configura√ß√µes de visibilidade do perfil do usu√°rio n√£o devem ser atualizadas.
            - Uma mensagem de erro deve ser exibida ap√≥s a tentativa de atualiza√ß√£o.
        '''

        self.client.login(username=self.email, password=self.password)
        new_wrong_email_config = 'wrongconfig'

        response = self.client.post(
            self.profile_config_update_url, 
            {
                'config_email_visibility': new_wrong_email_config,
                'config_photo_visibility': 'QU',
                'config_status_visibility': 'AA',
                'config_online_visibility': 'NM'
            },
            follow=True  # Segue o redirecionamento
        )

        messages = [msg.message for msg in get_messages(response.wsgi_request)]
        self.assertIn('Erro na altera√ß√£o das configura√ß√µes!', messages)
        self.assertIn(f'Fa√ßa uma escolha v√°lida. {new_wrong_email_config} n√£o √© uma das escolhas dispon√≠veis.', messages)
